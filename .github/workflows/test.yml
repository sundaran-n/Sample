name: File Validation Workflow

on:
  workflow_dispatch:
    inputs:
      file-name:
        description: 'Enter the name of the file to validate (e.g., test.txt)'
        required: true
        default: 'test.txt'  # Default file name to check
      search-key:
        description: 'Enter the key to search for (e.g., component, imageversion)'
        required: true
        default: 'component'  # Default search key

jobs:
  validate-file:
    runs-on: ubuntu-latest  # The job will run on an Ubuntu runner

    steps:
      # Step 1: Checkout the code (so we can access the file in the repo)
      - name: Checkout repository code
        uses: actions/checkout@v2

      # Step 2: Get file name and search key input (this is passed when triggering the workflow)
      - name: Get file name and search key input
        id: inputs
        run: |
          echo "File name input: ${{ github.event.inputs['file-name'] }}"
          echo "Search key input: ${{ github.event.inputs['search-key'] }}"

      # Step 3: Search for the file recursively in the repository
      - name: Search for the file in the repository
        id: search_file
        run: |
          file_name="${{ github.event.inputs['file-name'] }}"
          # Search for the file in the entire repository
          file_path=$(find . -type f -name "$file_name")
          
          if [ -z "$file_path" ]; then
            echo "File not found: $file_name"
            exit 1  # Exit the job if the file is not found
          else
            echo "File found at: $file_path"
            echo "::set-output name=file_path::$file_path"  # Set the file path as output
          fi

      # Step 4: Validate if the file has a '.txt' extension
      - name: Validate file name
        id: validate_file_name
        run: |
          file_name="${{ github.event.inputs['file-name'] }}"
          extension="${file_name##*.}"
          
          # Check if the file has a '.txt' extension
          if [ "$extension" == "txt" ]; then
            echo "File name is valid (it has a .txt extension)."
          else
            echo "Invalid file extension. Only .txt files are allowed."
            exit 1  # Exit the job if the file extension is not .txt
          fi

      # Step 5: Print specific content based on input key (component or imageversion)
      - name: Print specific content from the file
        run: |
          # Access the file path output from Step 3
          file_path="${{ steps.search_file.outputs.file_path }}"
          search_key="${{ github.event.inputs['search-key'] }}"  # The key to search for (e.g., component)

          # Read the file and look for the key-value pair
          echo "Searching for '$search_key' in $file_path"
          
          # Initialize variable to hold the value
          value=""
          
          # Loop through each line in the file and check for the search_key
          while IFS= read -r line; do
            # Check if the line contains the search key
            if [[ "$line" == "$search_key:"* ]]; then
              # Extract the value by removing the key and colon, and store it in the 'value' variable
              value="${line#*: }"
              break  # Stop once the value is found
            fi
          done < "$file_path"

          # Print the result
          if [ -n "$value" ]; then
            echo "Value for '$search_key': $value"
          else
            echo "Key '$search_key' not found in the file."
          fi
