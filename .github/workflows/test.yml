  name: File Validation Workflow

on:
  workflow_dispatch:
    inputs:
      iteration:
        description: 'Enter the directory name and ITERATION value'
        required: true
        

jobs:
  validate-file:
    runs-on: ubuntu-latest  

    steps:
      
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Get iteration input
        id: inputs
        run: |
          echo "Iteration input: ${{ github.event.inputs['iteration'] }}"

      - name: Search directories in the release directory and validate
        id: search_file
        run: |
          release_dir="release"
          input_iteration="${{ github.event.inputs['iteration'] }}"  # Get the iteration input

          # Initialize environment variable to store file content (encoded)
          echo "STORED_CONTENT=" > $GITHUB_ENV

          # Loop through each subdirectory (numbered directories) in the release directory
          for dir in "$release_dir"/*; do
            if [ -d "$dir" ]; then
              iteration=$(basename "$dir")  # Get the directory name, e.g., '2305'

              # If directory name doesn't match the input iteration, skip
              if [ "$iteration" != "$input_iteration" ]; then
                continue
              fi

              # Find the text file inside the numbered directory
              text_file=$(find "$dir" -type f -name "*.txt")
              
              if [ -z "$text_file" ]; then
                echo "No .txt file found in directory $dir"
                continue
              fi

              echo "Checking directory: $dir"
              echo "Looking for ITERATION: $iteration in the file"

              # Read the file and check if ITERATION matches the directory name
              iteration_found=""
              while IFS= read -r line; do
                if [[ "$line" =~ ^ITERATION:\ *([0-9]+) ]]; then
                  file_iteration="${BASH_REMATCH[1]}"  # Extract the ITERATION value
                  iteration_found="$file_iteration"
                  break
                fi
              done < "$text_file"

              # If ITERATION matches the directory name, store content as environment variable
              if [ "$iteration_found" == "$iteration" ]; then
                echo "ITERATION matches the directory name ($iteration). Storing file contents in environment variable."

                # Store the content in the environment variable (encode it)
                content=""
                while IFS= read -r line; do
                  # Replace newline characters and encode the content safely
                  content="$content$line"\\n
                done < "$text_file"

                # Encode the content (replace problematic characters)
                encoded_content=$(echo -n "$content" | base64)

                # Set the content as an environment variable
                echo "STORED_CONTENT=$encoded_content" >> $GITHUB_ENV
              else
                echo "ITERATION in the file does not match the directory name ($iteration). Skipping this file."
              fi
            fi
          done

      - name: Decode and print the stored content
        run: |
          echo "Printing the stored content:"
          decoded_content=$(echo "$STORED_CONTENT" | base64 --decode)
          echo "$decoded_content"
