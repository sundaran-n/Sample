name: File Validation Workflow

on:
  workflow_dispatch:
    inputs:
      iteration:
        description: 'Enter the directory name and ITERATION value'
        required: true

jobs:
  validate-file:
    runs-on: ubuntu-latest  

    steps:
      # Checkout the repository
      - name: Checkout repository code
        uses: actions/checkout@v2

      # Get the iteration input
      - name: Get iteration input
        id: inputs
        run: |
          echo "Iteration input: ${{ github.event.inputs['iteration'] }}"

      # Search directories in the release directory and validate
      - name: Search directories in the release directory and validate
        id: search_file
        run: |
          release_dir="release"
          input_iteration="${{ github.event.inputs['iteration'] }}"  # Get the iteration input

          # Loop through each subdirectory (numbered directories) in the release directory
          for dir in "$release_dir"/*; do
            if [ -d "$dir" ]; then
              iteration=$(basename "$dir")  # Get the directory name, e.g., '2305'

              # If directory name doesn't match the input iteration, skip
              if [ "$iteration" != "$input_iteration" ]; then
                continue
              fi

              # Find the text file inside the numbered directory
              text_file=$(find "$dir" -type f -name "*.txt")

              if [ -z "$text_file" ]; then
                echo "No .txt file found in directory $dir"
                continue
              fi

              echo "Checking directory: $dir"
              echo "Looking for ITERATION: $iteration in the file"

              # Read the file and check if ITERATION matches the directory name
              iteration_found=""
              while IFS= read -r line; do
                if [[ "$line" =~ ^ITERATION:\ *([0-9]+) ]]; then
                  file_iteration="${BASH_REMATCH[1]}"  # Extract the ITERATION value
                  iteration_found="$file_iteration"
                  break
                fi
              done < "$text_file"

              # If ITERATION matches the directory name, set environment variables from the file
              if [ "$iteration_found" == "$iteration" ]; then
                echo "ITERATION matches the directory name ($iteration). Setting environment variables."

                # Read the file again and set each value as an environment variable
                export ITERATION=$(grep 'ITERATION' "$text_file" | cut -d':' -f2 | xargs)
                export IMAGETAG=$(grep 'IMAGETAG' "$text_file" | cut -d':' -f2 | xargs)
                export DB=$(grep 'DB' "$text_file" | cut -d':' -f2 | xargs)

                # Set the environment variables for the current job
                echo "ITERATION=$ITERATION" >> $GITHUB_ENV
                echo "IMAGETAG=$IMAGETAG" >> $GITHUB_ENV
                echo "DB=$DB" >> $GITHUB_ENV

              else
                echo "ITERATION in the file does not match the directory name ($iteration). Skipping this file."
              fi
            fi
          done

      # Use the environment variables
      - name: Use the environment variables
        run: |
          echo "Iteration: $ITERATION"
          echo "Image Tag: $IMAGETAG"
          echo "Database: $DB"
